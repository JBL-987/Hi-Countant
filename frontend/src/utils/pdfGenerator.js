import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

/**
 * Generates a PDF document from transaction data
 * @param {Object} transaction - The transaction data
 * @returns {Blob} - The generated PDF as a Blob
 */
export const generateTransactionPDF = (transaction) => {
  // Create a new PDF document
  const doc = new jsPDF();

  // Add company logo/header
  doc.setFontSize(20);
  doc.setTextColor(0, 51, 153);
  doc.text("Hi! Countant", 105, 15, { align: "center" });

  // Add transaction title
  doc.setFontSize(16);
  doc.setTextColor(0, 0, 0);
  doc.text(
    `${capitalizeFirstLetter(transaction.transactionType)} Record`,
    105,
    25,
    { align: "center" }
  );

  // Add transaction date and reference
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 30, {
    align: "center",
  });

  // Add transaction details
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);

  // Basic transaction info
  doc.setFillColor(240, 240, 240);
  doc.rect(14, 35, 182, 10, "F");
  doc.setFont(undefined, "bold");
  doc.text("Transaction Details", 15, 42);
  doc.setFont(undefined, "normal");

  const detailsData = [
    ["Date", formatDate(transaction.date)],
    ["Type", capitalizeFirstLetter(transaction.transactionType)],
    ["Amount", formatCurrency(transaction.amount)],
    ["Category", transaction.category || "Uncategorized"],
    ["Payment Method", capitalizeFirstLetter(transaction.paymentMethod)],
    ["Reference", transaction.reference || "N/A"],
    ["Tax Deductible", transaction.taxDeductible ? "Yes" : "No"],
  ];

  // Use autoTable with the doc as first parameter
  autoTable(doc, {
    startY: 46,
    head: [],
    body: detailsData,
    theme: "grid",
    styles: { fontSize: 10 },
    columnStyles: {
      0: { fontStyle: "bold", cellWidth: 40 },
      1: { cellWidth: "auto" },
    },
    margin: { left: 15, right: 15 },
  });

  // Add description
  // Get the final Y position from the previous table
  let finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 100;
  doc.setFillColor(240, 240, 240);
  doc.rect(14, finalY, 182, 10, "F");
  doc.setFont(undefined, "bold");
  doc.text("Description", 15, finalY + 7);
  doc.setFont(undefined, "normal");

  doc.text(
    transaction.description || "No description provided",
    15,
    finalY + 20
  );

  // Add line items if they exist
  if (transaction.lineItems && transaction.lineItems.length > 0) {
    const lineItemsY = finalY + 30;
    doc.setFillColor(240, 240, 240);
    doc.rect(14, lineItemsY, 182, 10, "F");
    doc.setFont(undefined, "bold");
    doc.text("Line Items", 15, lineItemsY + 7);
    doc.setFont(undefined, "normal");

    const lineItemsTableHead = [["Description", "Category", "Amount"]];
    const lineItemsTableBody = transaction.lineItems.map((item) => [
      item.description,
      item.category || "Uncategorized",
      formatCurrency(parseFloat(item.amount)),
    ]);

    // Add total row
    lineItemsTableBody.push([
      {
        content: "Total",
        colSpan: 2,
        styles: { fontStyle: "bold", halign: "right" },
      },
      {
        content: formatCurrency(parseFloat(transaction.amount)),
        styles: { fontStyle: "bold" },
      },
    ]);

    autoTable(doc, {
      startY: lineItemsY + 10,
      head: lineItemsTableHead,
      body: lineItemsTableBody,
      theme: "grid",
      styles: { fontSize: 10 },
      columnStyles: {
        0: { cellWidth: "auto" },
        1: { cellWidth: 40 },
        2: { cellWidth: 30, halign: "right" },
      },
      margin: { left: 15, right: 15 },
    });
  }

  // Add notes if they exist
  if (transaction.notes) {
    const notesY = doc.lastAutoTable
      ? doc.lastAutoTable.finalY + 10
      : finalY + 30;
    doc.setFillColor(240, 240, 240);
    doc.rect(14, notesY, 182, 10, "F");
    doc.setFont(undefined, "bold");
    doc.text("Notes", 15, notesY + 7);
    doc.setFont(undefined, "normal");

    // Split notes into lines to handle long text
    const splitNotes = doc.splitTextToSize(transaction.notes, 170);

    // Use autotable for notes to prevent text overlap
    autoTable(doc, {
      startY: notesY + 12,
      head: [],
      body: [[splitNotes.join("\n")]],
      theme: "plain",
      styles: {
        fontSize: 10,
        cellPadding: 5,
        overflow: "linebreak",
        lineWidth: 0,
      },
      margin: { left: 15, right: 15 },
    });
  }

  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      "Generated by Hi! Countant - AI Accountant Platform",
      105,
      doc.internal.pageSize.height - 10,
      { align: "center" }
    );
  }

  // Return the PDF as a blob
  return doc.output("blob");
};

// Helper functions
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString();
}

function formatCurrency(amount) {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);
}

function capitalizeFirstLetter(string) {
  if (!string) return "";
  return string.charAt(0).toUpperCase() + string.slice(1);
}
